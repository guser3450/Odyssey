COLUMN
    - ELEVATOR list
    - Buttons
    - nbFloor
    - nbElevator

ELEVATOR
    - floor
    - direction
    - status

REQUEST 
    - destination
    - floor
    - elevator for this specific senario 


"elevator_list"
INIT Elevator_list
 elevator


INIT User_floor

INIT status
    idle AND Up AND Down

INIT floor 

"the floor were the user as the choice to go UP or DOWN"
INIT User_floor
    ADD Button FOR EACH User_floor
    FOR EACH Button OUTPUT print(Up) AND print(Down)
    UNTIL END of Button
    1 <-- RC


"Button on the colonne(up, down) so request_elevator is dependente to find_elevator and find_elevator depend on request_elevator"
SEQUENCE request_elevator USING floor AND direction
    CALL find_elevator WITH floor AND direction
    CALL queue WITH floor AND direction RETURNING queue 
    CALL operator 
    CALL move 
    CALL Open_door
    CALL Close_door
ENDSEQUENCE


SEQUENCE find_elevator USING user_floor AND user_direction 

   INIT priority 
   INIT best_elevator

    FOR EACH elevator IN COLUMN elevator_list

   IF user_floor is higher to elevator_floor AND user_destination is Down AND elevator_destination is Down THEN
    IF priority > 
    ADD TO bestCase_list priority 5

    ELSE IF user_floor is higher to elevator_floor AND user_destination is Down AND elevator_destination is up THEN
    ADD TO bestCase_list priority 

    ELSE IF user_floor is lower to elevator_floor AND user_destination is Up AND elevator_destination is up THEN
    ADD TO bestCase_list 5

    ELSE IF user_floor is lower to elevator_floor AND user_destination is Down AND elevator_destination is up THEN
    ADD TO bestCase_list    

    ELSE IF user_floor is higher to elevator_floor AND user_destination is Up AND elevator_destination is up THEN
    ADD TO bestCase_list to priority 1

    ELSE IF user_floor is higher to elevator_floor AND user_destination is Up AND elevator_destination is Down THEN
    ADD TO bestCase_list to priority              

    ELSE IF user_floor is lower to elevator_floor AND user_destination is Down AND elevator_destination is Down THEN
    ADD TO bestCase_list to priority               

    ELSE IF user_floor is lower to elevator_floor AND user_destination is Down AND elevator_destination is Up THEN
    ADD TO bestCase_list to priority               

    ELSE IF user_floor is higher to elevator_floor AND user_destination is Up AND elevator_IDLE THEN
    ADD TO bestCase_list to priority      

    ELSE IF user_floor is higher to elevator_floor AND user_destination is Down AND elevator_IDLE THEN
    ADD TO bestCase_list to priority

    ELSE IF user_floor is lower to elevator_floor AND user_destination is Down AND elevator_IDLE THEN
    ADD TO bestCase_list to priority               
               
    ELSE IF user_floor is lower to elevator_floor AND user_destination is Up AND elevator_IDLE THEN
    ADD TO bestCase_list to priority          

    ELSE IF user_floor is EQUALS to elevator_floor AND user_destination is Up AND elevator_IDLE THEN
    RETURN elevator  

    ELSE IF user_floor is EQUALS to elevator_floor AND user_destination is Down AND elevator_IDLE  THEN
    RETURN elevator 

    ELSE IF user_floor is EQUALS to elevator_floor AND user_destination is Up AND elevator_floor IS Up THEN
    ADD TO bestCase_list to priority 4

    ELSE IF user_floor is EQUALS to elevator_floor AND user_destination is Up AND elevator_floor IS Down THEN
    ADD TO bestCase_list to priority 4

    ELSE IF user_floor is EQUALS to elevator_floor AND user_destination is Down AND elevator_floor IS Up THEN
    ADD TO bestCase_list to priority 4

    ELSE IF user_floor is EQUALS to elevator_floor AND user_destination is Down AND elevator_floor IS Down THEN
    ADD TO bestCase_list to priority 4

    FOR EACH elevator IN COLUMN elevator_list

    ELSE IF elevator EQUALS Priority THEN
        SET elevator_gap to user_floor MINUS elevator floor
        RETURN elevator 
    END FOR
    Compare bestCase_list 
    return best_elevator    

ENDSEQUENCE


SEQUENCE queue USING floor AND direction
IF user request_elevator direction EQUALS to elevator current direction THEN
    elevator will stop AND Open_door AND Close_door AND continue is direction 
ELSE user request_elevator direction is NOT EQUALS to current direction THEN
    elevator will continue is Move 
ENDSEQUENCE


"operator see if the elevator list is empty or not and add a call to the choices elevator"
SEQUENCE operator USING elevator AND floor
INIT operator_list USING direction
    
    CALL find_elevator 
    RETURN elevator
IF elevator_list EQUALS to NULL THEN
    ADD user_floor to operator_list
    CALL move
ELSE IF elevator operator_list is NOT EQUALS to NULL THEN 
    ADD user_floor to end of operator_list

ENDSEQUENCE


"In this SEQUENCE I tell the elevator to use the floor_list to go up and down and I add some condition to max the quantity of people in the elevator"
SEQUENCE move USING Elevator AND floor_list 
WHILE floor_list is NOT empty 
    FOR EACH input_elevator
    IF Elevator_Floor IS higher TO floor_List THEN
        MoveDown AND REPEAT UNTIL elevator_floor IS EQUALS TO floor_list THEN
        idle AND Open_door

    IF Elevator_Floor IS lower TO floor_List THEN 
        MoveUp AND REPEAT UNTIL elevator_floor IS EQUALS TO floor_list THEN
        idle AND Open_door

    IF Floor_list IS NOT EQUALS TO NULL THEN 
        ADD the new request_elevator at the END OF the floor_list 
        IF floor_list containt MoveUp AND the new request_elevator IS Up THEN 
            ADD the new request_elevator TO the top OF floor_list 

        IF floor_list containt MoveDown AND the new request_elevator IS Down THEN
            ADD the new request_elevator TO the top OF floor_list
    ENDFOR
WHILE floor_list IS empty
    FOR EACH request_elevator
    IF request_elevator IS Up THEN 
        ADD TO floor_list
    IF request_elevator IS Down THEN
        ADD TO floor_list
    ENDFOR
ENDWHILE
ENDSEQUENCE


SEQUENCE Open_door 
    SPEED <-- 10 sec 
        Return open door for SPEED
ENDSEQUENCE


SEQUENCE Close_door
    IF obstacle EQUALS true
        RETURN Open_door
    ELSE
        RETURN Open_door
ENDSEQUENCE

