COLUMN
    - ELEVATOR list
    - Buttons
    - nbFloor
    - nbElevator

ELEVATOR
    - floor
    - direction
    - status

REQUEST 
    - destination
    - floor
    - elevator for this specific senario 

INIT elevator_list
    number of elevator in column

INIT column_list 
    EACH column_list contains elevator_list

"user wants to go to wock and to come back from it9"
SET TIMER TIER 1
FOR EACH elevator in column_list
IF time is between 1h00 am to 10h00 am OR 14h01 pm to 12h59 pm THEN 
    display first idle elevator to last floor AND second idle elevator between the last and the first floor
END IF
END FOR


"user is coming back for diner"
SET TIMER TIER 2 
FOR EACH elevator in column_list
IF time is between 10h01 am to 14h00 pm THEN
    display first idle elevator to first floor AND second idle elevator between the last and the first floor
END IF 
END FOR 



"2 elevators"
INIT status
    idle AND Up AND Down

"the floor were the user as the choice to go UP or DOWN"
INIT User_floor
    ADD Button FOR EACH User_floor
    FOR EACH Button OUTPUT print(Up) AND print(Down)
    IF Button is click THEN
        display a RED light around the Button
    END IF
    1 <-- RC
    END FOR 


SEQUENCE request_elevator USING floor AND direction 
    CALL find_elevator 
    CALL move 
    CALL queue 
    CALL Open_door
    CALL Close_door
ENDSEQUENCE


SEQUENCE find_elevator USING user_floor AND user_direction 

   INIT priority 
    FOR EACH elevator IN COLUMN elevator_list 

    IF user_floor is higher to elevator floor AND user_destination is Up AND elevator destination is Up  Or  user_floor is lower to elevator floor AND user_destination is Up AND elevator destination is Up THEN
    ADD TO priority 1 

    ELSE IF user_floor is EQUALS to elevator floor AND elevator is on idle THEN
    ADD TO priority 2

    ELSE IF user_floor is higher to elevator floor AND elevator is on idle  OR  user_floor is lower to elevator_floor AND elevator is on idle THEN
    ADD TO priority 3

    ELSE IF user_floor is higher to elevator floor AND user_destination is Up AND elevator destination is Down  OR  user_floor is lower to elevator floor AND user_destination is Up AND elevator destination is Down THEN
    ADD TO priority 4

    ELSE IF their is multiple priority THEN 
    priority 1 is the first choice AND 4 is the last choice

        CALL calculate_gap 
        RETURN elevator 
    END FOR
    END IF 
   
ENDSEQUENCE

"difference for each elevator in the same priority to get the smallest value"
SEQUENCE calculate_gap USING direction AND floor 
SET all number to positive 
    IF priority_list is choose THEN 
        do the difference between elevator floor AND user floor AND choose the 
        RETURN smallest value
ENDSEQUENCE


"were the elevator prioritizes the pick up"
SEQUENCE queue USING floor AND direction
IF user request_elevator direction EQUALS to elevator current direction THEN
    elevator will stop AND Open_door AND Close_door AND continue is direction 
ELSE user request_elevator direction is NOT EQUALS to current direction THEN
    elevator will continue is Move 
ENDSEQUENCE


"In this SEQUENCE I tell the elevator to go up or down if queue if used"
SEQUENCE Move USING floor AND direction
If elevator direction is up THEN 
    go to the floor up above
ELSE IF elevator direction is down THEN 
    go to the lower floor
    Move Up OR Move Down
ENDSEQUENCE


SEQUENCE Open_door 
    SPEED <-- 10 sec 
        Return open door for SPEED
ENDSEQUENCE


SEQUENCE Close_door
    IF obstacle EQUALS true
        RETURN Open_door
    ELSE
        RETURN Open_door
ENDSEQUENCE

