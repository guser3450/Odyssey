COLUMN
    - ELEVATOR list
    - Buttons
    - nbFloor
    - nbElevator

ELEVATOR
    - floor
    - direction
    - status

REQUEST 
    - destination
    - floor
    - elevator for this specific senario 

INIT floor 
FOR EACH floor define a Number 1++ UNTIL EQUALS 60 AND ADD B1 to B6 FOR the basement
END FOR

INIT column_list 
    EACH column contains elevator_list

INIT elevator_list
    number of elevator in column

"user wants to go to wock and to come back from it"
SET TIMER TIER 1
FOR EACH elevator in column_list
IF time is between 1h00 am to 10h00 am OR 14h01 pm to 12h59 pm THEN 
    display first idle elevator to first floor AND display second idle elevator between the last and the first floor AND display the other elevator in elevator_list on first 
END IF
END FOR


"user is coming back for diner"
SET TIMER TIER 2 
FOR EACH elevator in column_list
IF time is between 10h01 am to 14h00 pm THEN
    display first idle elevator to last floor of its column AND second idle elevator between the last and the first floor of its column AND display the other elevator in elevator_list on first 
END IF
END FOR 


"the actual panel to press the requested floor in rc"
in first floor
INIT column_panel USING floor AND destination
RECTANGLE OUTPUT WITH buttons display in 3x5
FOR EACH button asigne 1 TO 9 AND B1 TO B6 
print in red user requested floor of 2 Number on small screen on midle top of the RECTANGLE OUTPUT
IF user press 2 times on the same buttons exept for the B1 to B6 buttons THEN 
    RETURN 2 same number 

"we can request floor every 7 secondes" 
RETURN TO 0 every 7 secondes
"0 means ready to receive a other floor number" 

SEQUENCE select column USING floor AND direction
    IF user press buttons on first floor THEN 
        RETURN number  
    IF floor IS BETWEEN 2 TO 20 THEN
        print column A

        INIT column A
        FOR every floor INPUT button to go down
            INIT elevator 
                A1 TO A3
        END FOR

    ELSE IF floor IS BETWEEN 21 TO 40 THEN
        print column B

        INIT column B
        FOR every floor INPUT button to go down
            INIT elevator B
                B1 TO B3
        END FOR

    ELSE IF floor IS BETWEEN 41 TO 60 THEN
        print column C

        INIT column C
        FOR every floor INPUT button to go down
            INIT elevator C
                C1 TO C3
        END FOR
  
    ELSE IF floor IS BETWEEN B1 TO B6 THEN
        print column D

        INIT column D
        FOR every floor INPUT button to go down
            INIT elevator D
                D1 TO D3
        END FOR
    END IF
ENDSEQUENCE

"main event"
SEQUENCE request_elevator USING floor AND direction
IF the user INPUT a floor on column_panel THEN
    CALL find_elevator OR CALL find_basement
    CALL Move
    CALL queue OR CALL queue_B
    CALL open_door 
    CALL close_door
END IF  
ENDSEQUENCE

SEQUENCE find_elevator USING user_floor AND user_destination AND idle
FOR EACH elevator_list

    IF floor is 2 to 20 THEN
        RETURN column A 
    ELSE IF floor is 21 to 40
        RETURN column B
    ELSE IF floor is 41 to 60
        RETURN column C
SET priority_list

    IF elevator go up THEN 
        go up until requested floor 

    ELSE IF elevator go down AND user floor is lower to elevator floor THEN 
        ADD TO priority 1
        CALL calculate_gap
        RETURN elevator

    ELSE IF elevator status EQUALS idle THEN 
        ADD TO priority 2
        CALL calculate_gap
        RETURN elevator
END FOR
ENDSEQUENCE


SEQUENCE find_basement USING user_floor AND user_destination AND idle
FOR column A 
FOR EACH elevator in elevator_list 
SET priority_list

    IF elevator go down THEN 
        go up until requested floor 

    ELSE IF elevator go up AND user floor is higher to elevator floor THEN 
        ADD TO priority 1
        CALL calculate_gap
        RETURN elevator

    ELSE IF elevator status EQUALS idle THEN 
        ADD TO priority 2
        CALL calculate_gap
        RETURN elevator
END IF
END FOR
ENDSEQUENCE 


"difference between elevators in the same priority"
SEQUENCE calculate_gap USING direction AND floor 
SET all number to positive 
FOR EACH column_list AND elevator_list
    IF request_elevator
        do the difference between elevator floor AND user floor AND 
        Return the smallest value
    END IF
END FOR 
ENDSEQUENCE


"In this SEQUENCE I tell the elevator to go up or down if queue if used"
SEQUENCE Move USING floor AND direction
If elevator direction is up THEN 
    go to the floor up above
ELSE IF elevator direction is down THEN 
    go to the lower floor
    Move Up OR Move Down
ENDSEQUENCE


SEQUENCE queue USING floor AND direction
FOR EACH elevator_list
    IF floor is 2 to 20 THEN
        RETURN column B 
    ELSE IF floor is 21 to 40
        RETURN column C 
    ELSE IF floor is 41 to 60
        RETURN column D
IF request_elevator direction is EQUALS to elevator current direction AND the user is BETWEEN elevator AND floor 1 THEN
    elevator will stop AND Open_door AND Close_door AND continue is direction 
ELSE user request_elevator direction is NOT EQUALS to current direction THEN
    elevator will continue is Move 
END FOR
ENDSEQUENCE


SEQUENCE queue_B USING floor AND direction
FOR EACH elevator_list
    IF floor is B1 to B6 THEN
        RETURN column A
   
IF request_elevator direction is EQUALS to elevator current direction AND the user is BETWEEN elevator AND floor 1 THEN
    elevator will stop AND Open_door AND Close_door AND continue is direction 
ELSE user request_elevator direction is NOT EQUALS to current direction THEN
    elevator will continue is Move 
END FOR
ENDSEQUENCE



SEQUENCE Open_door 
    SPEED <-- 10 sec 
        Return open door for SPEED
ENDSEQUENCE


SEQUENCE Close_door USING obstacle AND Open_door
    if obstacle EQUALS true
        RETURN Open_door
    else
        RETURN Open_door
    END LOOP 
ENDSEQUENCE