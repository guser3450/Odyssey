COLUMN
    - ELEVATOR list
    - Buttons
    - nbFloor
    - nbElevator

ELEVATOR
    - floor
    - direction
    - status

REQUEST 
    - destination
    - floor
    - elevator for this specific senario 

"The floor is the first array the user will interact with to start is journey"
INIT floor 
FOR EACH floor define a Number 1++ UNTIL EQUALS 60 AND ADD B1 to B6 FOR the basement
1 <-- RC 


    FOR RC 

ENDFOR

    "the actual panel to press the requested floor"
    INIT ON_column_panel USING floor AND destination
    print 1 buttons IN column of 3x5 
    print user requested floor of 2 Number
    "we can request floor every 7 secondes" 
    RETURN TO 0 every 7 secondes

    column <-- 
    FOR EACH button 1 TO 9 AND B1 TO B6 AND 0
    "0 means ready to receive a other floor number"

        SEQUENCE request_elevator USING floor AND direction
            IF floor IS BETWEEN 2 TO 20 THEN
                print go to colonne A

                    INIT colonne A[
                        2 TO 20
                        INIT elevator [
                            A1 TO A3
                        ]
                    ]
            ELSE IF floor IS BETWEEN 21 TO 40 THEN
                RETURN print colonne B

                    INIT colonne B[
                        21 TO 40
                        INIT elevator B[
                            B1 TO B3
                        ]
                    ]
            ELSE IF floor IS BETWEEN 41 TO 60 THEN
                RETURN print colonne C

                    INIT colonne C[
                        41 TO 60
                        INIT elevator C[
                            C1 TO C3
                        ]
                    ]
            ELSE IF floor IS BETWEEN -1 TO -6 THEN
                RETURN print colonne D

                    INIT colonne D[
                        -1 TO -6
                        INIT elevator D[
                            D1 TO D3
                        ]
                    ]
        ENDSEQUENCE



"display idle elevator to a specific floor to be prepare for the demand"
WHILE 
SET timer to 1h to 8h
SET starting point for elevator_list ******************************
IF elevator_IDLE THEN 
RETURN elevator_IDLE to
ONCE timer REACH 8h END WHILE LOOP


IF the user INPUT a floor THEN
    CALL find_elevator 
    CALL operate_elevator (retourn to RC AND receive floor_destination)
    CALL open_door 
    CALL close_door 



SEQUENCE Open_door 
    SPEED <-- 10 sec 
        Return open door for SPEED
ENDSEQUENCE


SEQUENCE Close_door USING obstacle AND Open_door
    if obstacle EQUALS true
        RETURN Open_door
    else
        RETURN Open_door
ENDSEQUENCE

SEQUENCE find_elevator USING user_floor AND elevator_floor AND user_destination AND elevator_destination AND elevator_IDLE

"compare the value in each priority"
SET priority_list
    priority 1
    ""
    priority 2 
    "elevator is going to a spesific floor"
    priority 3 
    "elevator is returning to rc"
    priority 4


    "avec sais chiffre je vais pouvoir calculer le total"
    ELSE IF user_floor is higher to elevator floor AND user_destination is Up AND elevator destination is Up  Or  user_floor is lower to elevator floor AND user_destination is Down AND elevator destination is Down THEN
    ADD TO bestCase_list to priority 1 

    ELSE IF user_floor is EQUALS to elevator floor AND elevator is on idle THEN
    ADD TO bestCase_list to priority 2

    ELSE IF user_floor is higher to elevator floor AND elevator is on idle  OR  user_floor is lower to elevator_floor AND elevator is on idle THEN
    ADD TO bestCase_list to priority 3

    ELSE IF user_floor is higher to elevator floor AND user_destination is Up AND elevator destination is Down  OR  user_floor is lower to elevator floor AND user_destination is diffrent to elevator destination THEN
    ADD TO bestCase_list to priority 4



    "to calculate the diffrence between the floors without confusion"
    FOR EACH negative number EQUALS positive number
    Take all the values in EACH priority AND subtract them all together
        RETURN elevator for the lowest value in EACH priority 
    
    ENDFOR
ENDSEQUENCE


"the default direction when user is not at the rc is down except if user is at basement"
SEQUENCE queue USING floor AND direction
IF request_elevator direction is EQUALS to elevator current direction AND the user is BETWEEN elevator AND floor THEN
    elevator will stop AND Open_door AND Close_door AND continue is direction 
ELSE user request_elevator direction is NOT EQUALS to current direction THEN
    elevator will continue is Move 
ENDSEQUENCE



SEQUENCE operation_list USING floor AND destination
INIT operation_list 
IF elevator Move Up AND operation_list is NOT empty THEN 
    new request is the last on the list 
"every time the elevator is going to RC and there is a request on a floor lower elevator then the elevator will stop for a pick up"
ELSE IF elvator Move Down THEN 
every operation under the elevator_floor is going first on operation_list 



