// include "\0" at the end
ARRAY: User_floor[11]


ARRAY: User_floor[11]
    ADD Button FOR EACH User_floor[i]
    FOR EACH Button OUTPUT print(Up) AND print(Down)
    FOR EACH Up AND Down Button IS define By Number(1++)
    UNTIL END of Button[i]
    1 <-- RC 


// this pointer does not change array. It only transport information form the user INPUT FROM Floor[1] (An ARRAY to An other)
POINTER <-- Elevator  


ARRAY: Storeys[i]


Storeys[i] EQUALS User_floor[i]
    //pointer
    ADD Elevator
    FOR EACH Storeys[i] ADD Button AND print(Storeys[i])



//              SEQUENCE             \\

SEQUENCE elevator_list(elevator)
Integer Elevator[2]
ENDSEQUENCE


SEQUENCE input_button(Button)
FOR EACH INPUT Button IN User_floor[i]
    IF(Button UP IS click)
        RETURN direction Up
    ELSE IF(Button Down IS click)
        RETURN direction Down
ENDSEQUENCE


SEQUENCE Open_door()
    SPEED <-- 10 sec 
        Return open door for SPEED
ENDSEQUENCE


SEQUENCE Close_door()
    if(obstacle == true)
        go back to Open_door()
    else
ENDSEQUENCE

SEQUENCE move(Elevator, direction)
FOR EACH INPUT command 
    Elevator go up OR down 
    RETURN Elevator
ENDSEQUENCE


SEQUENCE find_elevator(floor, direction)
FOR EACH elevator in the elevator_list 
IF(elevator floor EQUALS User floor AND elevator direction EQUALS User direction THEN)
    RETURN Elevator 
ELSE IF(elevator direction EQUALS User direction AND elevator floor MINUS User floor IS smaller TO 0 THEN)
    RETURN Elevator 
ELSE IF(elevator direction EQUALS User direction AND elevator floor MINUS User floor IS greater to 0 THEN)
    RETURN Elevator 
ELSE IF(elevator floor EQUALS User floor AND elevator direction IS Up AND User direction IS Down THEN)
    RETURN Elevator 
ELSE IF(elevator floor EQUALS User floor AND elevator direction IS Down AND User direction IS Down THEN)
    RETURN Elevator 
ELSE IF(elevator direction IS Down AND User direction IS Up AND elevator floor MINUS User floor IS smaller TO 0 THEN)
    RETURN Elevator 
ELSE IF(elevator direction IS Down AND User direction IS Up AND elevator floor MINUS User floor IS greater TO 0 THEN)
    RETURN Elevator 
ENDSEQUENCE


SEQUENCE input_elevator(floor, direction)
FOR EACH time find_elevator() RETURN elevator 
User from User_floor[i] go TO Storeys[i] AND INPUT Storeys[i]
CALL Close_door()
Elevator go TO INPUT Storeys[i]
Open_door()
ENDSEQUENCE






